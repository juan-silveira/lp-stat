/*!
* LP STAT
* Retrieve a complete information about farms in a DeFi protocol
* https://lap-stat.web.app
* @author Juan Silveira -- https://github.com/juan-silveira
* Copyright 2021. MIT Licensed.
*/

!function(n){function e(e){for(var i,l,o=e[0],s=e[1],u=e[2],p=0,d=[];p<o.length;p++)l=o[p],Object.prototype.hasOwnProperty.call(r,l)&&r[l]&&d.push(r[l][0]),r[l]=0;for(i in s)Object.prototype.hasOwnProperty.call(s,i)&&(n[i]=s[i]);for(c&&c(e);d.length;)d.shift()();return a.push.apply(a,u||[]),t()}function t(){for(var n,e=0;e<a.length;e++){for(var t=a[e],i=!0,o=1;o<t.length;o++){var s=t[o];0!==r[s]&&(i=!1)}i&&(a.splice(e--,1),n=l(l.s=t[0]))}return n}var i={},r={0:0},a=[];function l(e){if(i[e])return i[e].exports;var t=i[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,l),t.l=!0,t.exports}l.m=n,l.c=i,l.d=function(n,e,t){l.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},l.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},l.t=function(n,e){if(1&e&&(n=l(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(l.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)l.d(t,i,function(e){return n[e]}.bind(null,i));return t},l.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return l.d(e,"a",e),e},l.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},l.p="/js/";var o=window.webpackJsonp=window.webpackJsonp||[],s=o.push.bind(o);o.push=e,o=o.slice();for(var u=0;u<o.length;u++)e(o[u]);var c=s;a.push([345,1]),t()}({345:function(module,exports,__webpack_require__){eval("__webpack_require__(346);\nmodule.exports = __webpack_require__(805);\n\n\n//# sourceURL=webpack:///multi_babel-polyfill_./src/js/index.js?")},550:function(module,exports){eval("/* (ignored) */\n\n//# sourceURL=webpack:///buffer_(ignored)?")},555:function(module,exports){eval("// Avoid `console` errors in browsers that lack a console.\n(function () {\n  var method;\n\n  var noop = function noop() {};\n\n  var methods = ['assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error', 'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log', 'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd', 'timeline', 'timelineEnd', 'timeStamp', 'trace', 'warn'];\n  var length = methods.length;\n  var console = window.console = window.console || {};\n\n  while (length--) {\n    method = methods[length]; // Only stub undefined methods.\n\n    if (!console[method]) {\n      console[method] = noop;\n    }\n  }\n})();\n\n//# sourceURL=webpack:///./src/js/utils/errors.js?")},803:function(module,exports,__webpack_require__){eval("/**\n * (c) 2013 Beau Sorensen\n * MIT Licensed\n * For all details and documentation:\n * https://github.com/sorensen/ascii-table\n */\n;\n(function () {\n  'use strict';\n  /*!\n   * Module dependencies\n   */\n\n  var slice = Array.prototype.slice,\n      toString = Object.prototype.toString;\n  /**\n   * AsciiTable constructor\n   *\n   * @param {String|Object} title or JSON table\n   * @param {Object} table options\n   * - `prefix` - string prefix added to each line on render\n   * @constructor\n   * @api public\n   */\n\n  function AsciiTable(name, options) {\n    this.options = options || {};\n    this.reset(name);\n  }\n  /*!\n   * Current library version, should match `package.json`\n   */\n\n\n  AsciiTable.VERSION = '0.0.8';\n  /*!\n   * Alignment constants\n   */\n\n  AsciiTable.LEFT = 0;\n  AsciiTable.CENTER = 1;\n  AsciiTable.RIGHT = 2;\n  /*!\n   * Static methods\n   */\n\n  /**\n   * Create a new table instance\n   *\n   * @param {String|Object} title or JSON table\n   * @param {Object} table options\n   * @api public\n   */\n\n  AsciiTable.factory = function (name, options) {\n    return new AsciiTable(name, options);\n  };\n  /**\n   * Align the a string at the given length\n   *\n   * @param {Number} direction\n   * @param {String} string input\n   * @param {Number} string length\n   * @param {Number} padding character\n   * @api public\n   */\n\n\n  AsciiTable.align = function (dir, str, len, pad) {\n    if (dir === AsciiTable.LEFT) return AsciiTable.alignLeft(str, len, pad);\n    if (dir === AsciiTable.RIGHT) return AsciiTable.alignRight(str, len, pad);\n    if (dir === AsciiTable.CENTER) return AsciiTable.alignCenter(str, len, pad);\n    return AsciiTable.alignAuto(str, len, pad);\n  };\n  /**\n   * Left align a string by padding it at a given length\n   *\n   * @param {String} str\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignLeft = function (str, len, pad) {\n    if (!len || len < 0) return '';\n    if (str === undefined || str === null) str = '';\n    if (typeof pad === 'undefined') pad = ' ';\n    if (typeof str !== 'string') str = str.toString();\n    var alen = len + 1 - str.length;\n    if (alen <= 0) return str;\n    return str + Array(len + 1 - str.length).join(pad);\n  };\n  /**\n   * Center align a string by padding it at a given length\n   *\n   * @param {String} str\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignCenter = function (str, len, pad) {\n    if (!len || len < 0) return '';\n    if (str === undefined || str === null) str = '';\n    if (typeof pad === 'undefined') pad = ' ';\n    if (typeof str !== 'string') str = str.toString();\n    var nLen = str.length,\n        half = Math.floor(len / 2 - nLen / 2),\n        odds = Math.abs(nLen % 2 - len % 2),\n        len = str.length;\n    return AsciiTable.alignRight('', half, pad) + str + AsciiTable.alignLeft('', half + odds, pad);\n  };\n  /**\n   * Right align a string by padding it at a given length\n   *\n   * @param {String} str\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignRight = function (str, len, pad) {\n    if (!len || len < 0) return '';\n    if (str === undefined || str === null) str = '';\n    if (typeof pad === 'undefined') pad = ' ';\n    if (typeof str !== 'string') str = str.toString();\n    var alen = len + 1 - str.length;\n    if (alen <= 0) return str;\n    return Array(len + 1 - str.length).join(pad) + str;\n  };\n  /**\n   * Auto align string value based on object type\n   *\n   * @param {Any} object to string\n   * @param {Number} string length\n   * @param {String} padding character (optional, default '')\n   * @api public\n   */\n\n\n  AsciiTable.alignAuto = function (str, len, pad) {\n    if (str === undefined || str === null) str = '';\n    var type = toString.call(str);\n    pad || (pad = ' ');\n    len = +len;\n\n    if (type !== '[object String]') {\n      str = str.toString();\n    }\n\n    if (str.length < len) {\n      switch (type) {\n        case '[object Number]':\n          return AsciiTable.alignRight(str, len, pad);\n\n        default:\n          return AsciiTable.alignLeft(str, len, pad);\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Fill an array at a given size with the given value\n   *\n   * @param {Number} array size\n   * @param {Any} fill value\n   * @return {Array} filled array\n   * @api public\n   */\n\n\n  AsciiTable.arrayFill = function (len, fill) {\n    var arr = new Array(len);\n\n    for (var i = 0; i !== len; i++) {\n      arr[i] = fill;\n    }\n\n    return arr;\n  };\n  /*!\n   * Instance methods\n   */\n\n  /**\n   * Reset the table state back to defaults\n   *\n   * @param {String|Object} title or JSON table\n   * @api public\n   */\n\n\n  AsciiTable.prototype.reset = AsciiTable.prototype.clear = function (name) {\n    this.__name = '';\n    this.__nameAlign = AsciiTable.CENTER;\n    this.__rows = [];\n    this.__maxCells = 0;\n    this.__aligns = [];\n    this.__colMaxes = [];\n    this.__spacing = 1;\n    this.__heading = null;\n    this.__headingAlign = AsciiTable.CENTER;\n    this.setBorder();\n\n    if (toString.call(name) === '[object String]') {\n      this.__name = name;\n    } else if (toString.call(name) === '[object Object]') {\n      this.fromJSON(name);\n    }\n\n    return this;\n  };\n  /**\n   * Set the table border\n   *\n   * @param {String} horizontal edges (optional, default `|`)\n   * @param {String} vertical edges (optional, default `-`)\n   * @param {String} top corners (optional, default `.`)\n   * @param {String} bottom corners (optional, default `'`)\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setBorder = function (edge, fill, top, bottom) {\n    this.__border = true;\n\n    if (arguments.length === 1) {\n      fill = top = bottom = edge;\n    }\n\n    this.__edge = edge || '|';\n    this.__fill = fill || '-';\n    this.__top = top || '.';\n    this.__bottom = bottom || \"'\";\n    return this;\n  };\n  /**\n   * Remove all table borders\n   *\n   * @api public\n   */\n\n\n  AsciiTable.prototype.removeBorder = function () {\n    this.__border = false;\n    this.__edge = ' ';\n    this.__fill = ' ';\n    return this;\n  };\n  /**\n   * Set the column alignment at a given index\n   *\n   * @param {Number} column index\n   * @param {Number} alignment direction\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setAlign = function (idx, dir) {\n    this.__aligns[idx] = dir;\n    return this;\n  };\n  /**\n   * Set the title of the table\n   *\n   * @param {String} title\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setTitle = function (name) {\n    this.__name = name;\n    return this;\n  };\n  /**\n   * Get the title of the table\n   *\n   * @return {String} title\n   * @api public\n   */\n\n\n  AsciiTable.prototype.getTitle = function () {\n    return this.__name;\n  };\n  /**\n   * Set table title alignment\n   *\n   * @param {Number} direction\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setTitleAlign = function (dir) {\n    this.__nameAlign = dir;\n    return this;\n  };\n  /**\n   * AsciiTable sorting shortcut to sort rows\n   *\n   * @param {Function} sorting method\n   * @api public\n   */\n\n\n  AsciiTable.prototype.sort = function (method) {\n    this.__rows.sort(method);\n\n    return this;\n  };\n  /**\n   * Sort rows based on sort method for given column\n   *\n   * @param {Number} column index\n   * @param {Function} sorting method\n   * @api public\n   */\n\n\n  AsciiTable.prototype.sortColumn = function (idx, method) {\n    this.__rows.sort(function (a, b) {\n      return method(a[idx], b[idx]);\n    });\n\n    return this;\n  };\n  /**\n   * Set table heading for columns\n   *\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setHeading = function (row) {\n    if (arguments.length > 1 || toString.call(row) !== '[object Array]') {\n      row = slice.call(arguments);\n    }\n\n    this.__heading = row;\n    return this;\n  };\n  /**\n   * Get table heading for columns\n   *\n   * @return {Array} copy of headings\n   * @api public\n   */\n\n\n  AsciiTable.prototype.getHeading = function () {\n    return this.__heading.slice();\n  };\n  /**\n   * Set heading alignment\n   *\n   * @param {Number} direction\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setHeadingAlign = function (dir) {\n    this.__headingAlign = dir;\n    return this;\n  };\n  /**\n   * Add a row of information to the table\n   * \n   * @param {...|Array} argument values in order of columns\n   * @api public\n   */\n\n\n  AsciiTable.prototype.addRow = function (row) {\n    if (arguments.length > 1 || toString.call(row) !== '[object Array]') {\n      row = slice.call(arguments);\n    }\n\n    this.__maxCells = Math.max(this.__maxCells, row.length);\n\n    this.__rows.push(row);\n\n    return this;\n  };\n  /**\n   * Get a copy of all rows of the table\n   *\n   * @return {Array} copy of rows\n   * @api public\n   */\n\n\n  AsciiTable.prototype.getRows = function () {\n    return this.__rows.slice().map(function (row) {\n      return row.slice();\n    });\n  };\n  /**\n   * Add rows in the format of a row matrix\n   *\n   * @param {Array} row matrix\n   * @api public\n   */\n\n\n  AsciiTable.prototype.addRowMatrix = function (rows) {\n    for (var i = 0; i < rows.length; i++) {\n      this.addRow(rows[i]);\n    }\n\n    return this;\n  };\n  /**\n   * Add rows from the given data array, processed by the callback function rowCallback.\n   *\n   * @param {Array} data\n   * @param (Function) rowCallback\n   * @param (Boolean) asMatrix - controls if the row created by rowCallback should be assigned as row matrix\n   * @api public\n   */\n\n\n  AsciiTable.prototype.addData = function (data, rowCallback, asMatrix) {\n    if (toString.call(data) !== '[object Array]') {\n      return this;\n    }\n\n    for (var index = 0, limit = data.length; index < limit; index++) {\n      var row = rowCallback(data[index]);\n\n      if (asMatrix) {\n        this.addRowMatrix(row);\n      } else {\n        this.addRow(row);\n      }\n    }\n\n    return this;\n  };\n  /**\n  * Reset the current row state\n  *\n  * @api public\n  */\n\n\n  AsciiTable.prototype.clearRows = function () {\n    this.__rows = [];\n    this.__maxCells = 0;\n    this.__colMaxes = [];\n    return this;\n  };\n  /**\n   * Apply an even spaced column justification\n   *\n   * @param {Boolean} on / off\n   * @api public\n   */\n\n\n  AsciiTable.prototype.setJustify = function (val) {\n    arguments.length === 0 && (val = true);\n    this.__justify = !!val;\n    return this;\n  };\n  /**\n   * Convert the current instance to a JSON structure\n   *\n   * @return {Object} json representation\n   * @api public\n   */\n\n\n  AsciiTable.prototype.toJSON = function () {\n    return {\n      title: this.getTitle(),\n      heading: this.getHeading(),\n      rows: this.getRows()\n    };\n  };\n  /**\n   * Populate the table from a JSON object\n   *\n   * @param {Object} json representation\n   * @api public\n   */\n\n\n  AsciiTable.prototype.parse = AsciiTable.prototype.fromJSON = function (obj) {\n    return this.clear().setTitle(obj.title).setHeading(obj.heading).addRowMatrix(obj.rows);\n  };\n  /**\n   * Render the table with the current information\n   *\n   * @return {String} formatted table\n   * @api public\n   */\n\n\n  AsciiTable.prototype.render = AsciiTable.prototype.valueOf = AsciiTable.prototype.toString = function () {\n    var self = this,\n        body = [],\n        mLen = this.__maxCells,\n        max = AsciiTable.arrayFill(mLen, 0),\n        total = mLen * 3,\n        rows = this.__rows,\n        justify,\n        border = this.__border,\n        all = this.__heading ? [this.__heading].concat(rows) : rows; // Calculate max table cell lengths across all rows\n\n    for (var i = 0; i < all.length; i++) {\n      var row = all[i];\n\n      for (var k = 0; k < mLen; k++) {\n        var cell = row[k];\n\n        try {\n          if (cell.includes(\"href\")) {\n            // #eyo fix for href cell len\n            cell = row[k].toString().match(/\\'\\>([^\\<\\/a\\>]+)/i)[1];\n            console.log(cell);\n          } // else {cell = row[k]}\n\n        } catch (err) {\n          cell = row[k];\n        }\n\n        max[k] = Math.max(max[k], cell ? cell.toString().length : 0);\n      }\n    }\n\n    this.__colMaxes = max;\n    justify = this.__justify ? Math.max.apply(null, max) : 0; // Get \n\n    max.forEach(function (x) {\n      total += justify ? justify : x + self.__spacing;\n    });\n    justify && (total += max.length);\n    total -= this.__spacing; // Heading\n\n    border && body.push(this._seperator(total - mLen + 1, this.__top));\n\n    if (this.__name) {\n      body.push(this._renderTitle(total - mLen + 1));\n      border && body.push(this._seperator(total - mLen + 1));\n    }\n\n    if (this.__heading) {\n      body.push(this._renderRow(this.__heading, ' ', this.__headingAlign));\n      body.push(this._rowSeperator(mLen, this.__fill));\n    }\n\n    for (var i = 0; i < this.__rows.length; i++) {\n      body.push(this._renderRow(this.__rows[i], ' '));\n    }\n\n    border && body.push(this._seperator(total - mLen + 1, this.__bottom));\n    var prefix = this.options.prefix || '';\n    return prefix + body.join('\\n' + prefix);\n  };\n  /**\n   * Create a line seperator\n   *\n   * @param {Number} string size\n   * @param {String} side values (default '|')\n   * @api private\n   */\n\n\n  AsciiTable.prototype._seperator = function (len, sep) {\n    sep || (sep = this.__edge);\n    return sep + AsciiTable.alignRight(sep, len, this.__fill);\n  };\n  /**\n   * Create a row seperator\n   *\n   * @return {String} seperator\n   * @api private\n   */\n\n\n  AsciiTable.prototype._rowSeperator = function () {\n    var blanks = AsciiTable.arrayFill(this.__maxCells, this.__fill);\n    return this._renderRow(blanks, this.__fill);\n  };\n  /**\n   * Render the table title in a centered box\n   *\n   * @param {Number} string size\n   * @return {String} formatted title\n   * @api private\n   */\n\n\n  AsciiTable.prototype._renderTitle = function (len) {\n    var name = ' ' + this.__name + ' ',\n        str = AsciiTable.align(this.__nameAlign, name, len - 1, ' ');\n    return this.__edge + str + this.__edge;\n  };\n  /**\n   * Render an invdividual row\n   *\n   * @param {Array} row\n   * @param {String} column seperator\n   * @param {Number} total row alignment (optional, default `auto`)\n   * @return {String} formatted row\n   * @api private\n   */\n\n\n  AsciiTable.prototype._renderRow = function (row, str, align) {\n    var tmp = [''],\n        max = this.__colMaxes;\n\n    for (var k = 0; k < this.__maxCells; k++) {\n      var cell = row[k],\n          just = this.__justify ? Math.max.apply(null, max) : max[k] // , pad = k === this.__maxCells - 1 ? just : just + this.__spacing\n      ,\n          pad = just,\n          cAlign = this.__aligns[k],\n          use = align,\n          method = 'alignAuto';\n      if (typeof align === 'undefined') use = cAlign;\n      if (use === AsciiTable.LEFT) method = 'alignLeft';\n      if (use === AsciiTable.CENTER) method = 'alignCenter';\n      if (use === AsciiTable.RIGHT) method = 'alignRight';\n      tmp.push(AsciiTable[method](cell, pad, str));\n    }\n\n    var front = tmp.join(str + this.__edge + str);\n    front = front.substr(1, front.length);\n    return front + str + this.__edge;\n  }\n  /*!\n   * Aliases\n   */\n  // Create method shortcuts to all alignment methods for each direction\n  ;\n\n  ['Left', 'Right', 'Center'].forEach(function (dir) {\n    var constant = AsciiTable[dir.toUpperCase()];\n    ['setAlign', 'setTitleAlign', 'setHeadingAlign'].forEach(function (method) {\n      // Call the base method with the direction constant as the last argument\n      AsciiTable.prototype[method + dir] = function () {\n        var args = slice.call(arguments).concat(constant);\n        return this[method].apply(this, args);\n      };\n    });\n  });\n  /*!\n   * Module exports.\n   */\n\n  if (true) {\n    module.exports = AsciiTable;\n  } else {}\n}).call(this);\n\n//# sourceURL=webpack:///./src/js/ascii-table.js?")},805:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js\nvar jquery = __webpack_require__(334);\nvar jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);\n\n// EXTERNAL MODULE: ./node_modules/ethers/lib.esm/index.js + 68 modules\nvar lib_esm = __webpack_require__(340);\n\n// EXTERNAL MODULE: ./node_modules/ethcall/lib/index.js\nvar lib = __webpack_require__(335);\n\n// EXTERNAL MODULE: ./node_modules/picturefill/dist/picturefill.js\nvar picturefill = __webpack_require__(246);\n\n// EXTERNAL MODULE: ./src/js/utils/errors.js\nvar errors = __webpack_require__(555);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js\nvar helpers_typeof = __webpack_require__(243);\nvar typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);\n\n// CONCATENATED MODULE: ./src/js/utils/validation.js\n\n// From https://webbjocke.com/javascript-check-data-types/\nfunction isBoolean(value) {\n  return typeof value === \'boolean\';\n}\nfunction isString(value) {\n  return typeof value === \'string\' || value instanceof String;\n}\nfunction isNumber(value) {\n  return typeof value === \'number\' && isFinite(value);\n}\nfunction isArray(value) {\n  return Object.prototype.toString.call(value) === \'[object Array]\';\n}\nfunction isFunction(value) {\n  return typeof value === \'function\';\n}\nfunction isObject(value) {\n  return Boolean(value) && typeof_default()(value) === \'object\' && value.constructor === Object;\n}\nfunction isNull(value) {\n  return value === null;\n}\nfunction isUndefined(value) {\n  return typeof value === \'undefined\';\n}\nfunction isRegExp(value) {\n  return Boolean(value) && typeof_default()(value) === \'object\' && value.constructor === RegExp;\n}\n/* harmony default export */ var validation = ({\n  isBoolean: isBoolean,\n  isString: isString,\n  isNumber: isNumber,\n  isArray: isArray,\n  isFunction: isFunction,\n  isObject: isObject,\n  isNull: isNull,\n  isUndefined: isUndefined,\n  isRegExp: isRegExp\n});\n// EXTERNAL MODULE: ./node_modules/fuse.js/dist/fuse.esm.js\nvar fuse_esm = __webpack_require__(337);\n\n// CONCATENATED MODULE: ./src/js/utils/quick.js\n\nvar searchKeywords = [{\n  title: "$BASED sCRV",\n  link: "/based/scrv",\n  tags: ["based", "$based", "scrv", "scurve"]\n}, {\n  title: "$BASED sUSD",\n  link: "/based/scrv",\n  tags: ["based", "$based", "scrv", "scurve", "susd"]\n}, {\n  title: "Funzone",\n  link: "/funzone",\n  tags: ["shrimp", "tendies", "yam", "$BASED"]\n}, {\n  title: "Shrimp YFI",\n  link: "/shrimp/yfi",\n  tags: ["shrimp", "yfi"]\n}, {\n  title: "Shrimp Taco",\n  link: "/shrimp/taco",\n  tags: ["shrimp", "taco"]\n}, {\n  title: "Y Vaults",\n  link: "/yearn/yvault",\n  tags: ["yearn", "vault", "yvault", "andre", "cronje", "yusd"]\n}];\nvar upKey = 38;\nvar downKey = 40;\nvar bKey = 66;\nvar enterKey = 13;\n\nwindow.onload = function () {\n  var quickEl = document.getElementById("quick");\n  var quickInputEl = document.getElementById("quick-input");\n  var quickFormEl = document.getElementById("quick-form");\n  var quickDropdownEl = document.getElementById("quick-dropdown");\n  var fuse = new fuse_esm["a" /* default */](searchKeywords, {\n    includeScore: true,\n    keys: ["title", "tags", "link"]\n  });\n  window.addEventListener("keydown", function (event) {\n    // Ctrl/Cmd + B\n    if ((event.ctrlKey || event.metaKey) && event.which == bKey) {\n      event.preventDefault();\n      quickEl.style.display = "block";\n      quickInputEl.focus();\n    } else if (event.which == 27) {\n      event.preventDefault();\n      quickEl.style.display = "none";\n    }\n  });\n  quickInputEl === null || quickInputEl === void 0 ? void 0 : quickInputEl.addEventListener("input", function (event) {\n    var data = String(event.target.value).toLowerCase();\n    quickDropdownEl.innerHTML = fuse.search(data).map(function (d) {\n      return "<li><a href=\\"".concat(d.item.link, "\\">").concat(d.item.title, "</a></li>");\n    }).join("");\n  });\n  var currentIndex = null;\n  quickInputEl === null || quickInputEl === void 0 ? void 0 : quickInputEl.addEventListener("keydown", function (event) {\n    if (event.which === enterKey) {\n      quickDropdownEl.querySelector(".active a").click();\n      return;\n    }\n\n    var allLi = quickDropdownEl.querySelectorAll("li");\n    if (allLi.length === 0) return;\n    var itemLength = allLi.length;\n\n    if (event.which === upKey) {\n      event.preventDefault();\n      allLi.forEach(function (d) {\n        return d.classList.remove("active");\n      });\n      var selectedEl;\n\n      if (currentIndex === null || currentIndex === 0) {\n        selectedEl = allLi[itemLength - 1];\n        currentIndex = itemLength - 1;\n      } else {\n        var updatedIndex = currentIndex - 1;\n        selectedEl = allLi[updatedIndex];\n        currentIndex = updatedIndex;\n      }\n\n      selectedEl.classList.add("active");\n      selectedEl.focus();\n    } else if (event.which === downKey) {\n      event.preventDefault();\n      allLi.forEach(function (d) {\n        return d.classList.remove("active");\n      });\n\n      var _selectedEl;\n\n      if (currentIndex === null || currentIndex === itemLength - 1) {\n        _selectedEl = allLi[0];\n        currentIndex = 0;\n      } else {\n        var _updatedIndex = currentIndex + 1;\n\n        _selectedEl = allLi[_updatedIndex];\n        currentIndex = _updatedIndex;\n      }\n\n      _selectedEl.classList.add("active");\n\n      _selectedEl.focus();\n    }\n  });\n  quickFormEl === null || quickFormEl === void 0 ? void 0 : quickFormEl.addEventListener("submit", function (event) {\n    event.preventDefault();\n  });\n};\n// EXTERNAL MODULE: ./node_modules/core-js/stable/index.js\nvar stable = __webpack_require__(556);\n\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__(787);\n\n// CONCATENATED MODULE: ./src/js/index.js\n/** Variables available in all js files:\n * all the exported constants from globals.js\n */\n\n/** Directories available as aliases\n * all the paths within Dir in globals.js\n */\n\n\n //import dompurify from \'dompurify\'\n\n\n\n\n\n\n\nwindow.$ = jquery_default.a;\nwindow.ethers = lib_esm["a" /* ethers */];\nwindow.ethcall = lib;\nwindow.asciichart = __webpack_require__(802);\nwindow.AsciiTable = __webpack_require__(803);\nwindow.Diff = __webpack_require__(804); // eslint-disable-next-line no-console\n\nconsole.log("NODE_ENV: ".concat("production"));\n\n//# sourceURL=webpack:///./src/js/index.js_+_2_modules?')}});